{
  "openapi": "3.0.1",
  "info": {
    "title": "Compasso SaaS API Reference",
    "description": "Welcome to the Compasso API Documentation, your comprehensive guide to integrating Compasso's powerful management solutions into your freelance workflow. This documentation provides detailed insights into our API endpoints, authentication methods, data structures, and best practices to streamline your development process.",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.compasso.team"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/user": {
      "get": {
        "operationId": "getUserProfile",
        "tags": ["User"],
        "summary": "Fetches the authenticated user's profile.",
        "description": "Retrieves detailed information about the authenticated user's profile.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Account not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNotFoundError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateUserProfile",
        "tags": ["User"],
        "summary": "Updates the authenticated user's profile.",
        "description": "Allows users to update their profile information, including email, password, and various preferences.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data required to update the user profile.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "security": [],
        "operationId": "registerUser",
        "tags": ["User Management"],
        "summary": "Registers a new user.",
        "description": "Creates a new user account with the provided name, email, and password. Returns the user details upon successful registration.",
        "requestBody": {
          "description": "User registration data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "email", "password"],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Full name of the user."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address of the user. Must be unique."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user account. Must be at least 6 characters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Server error or unable to register user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingWentWrongError"
                }
              }
            }
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": ["Authentication"],
        "operationId": "login",
        "summary": "Authenticates a user and returns an access token.",
        "description": "Authenticates a user and provides an access token along with user details.",
        "requestBody": {
          "description": "Credentials required to authenticate the user.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials provided or other validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingWentWrongError"
                }
              }
            }
          }
        }
      }
    },
    "/token/refresh": {
      "patch": {
        "operationId": "refreshToken",
        "tags": ["Tokens"],
        "summary": "Refreshes the user's authentication tokens.",
        "description": "This endpoint refreshes the user's authentication tokens using a secure cookie that should be sent with the request.",
        "security": [
          {
            "cookieAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication tokens refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "Newly issued JWT access token."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access - no or invalid refresh token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred while processing the refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/token/two-factor": {
      "get": {
        "operationId": "2FAToken",
        "tags": ["Tokens"],
        "summary": "Return a 6 digit 2FA token.",
        "description": "This endpoint returns a 6 digit 2FA token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "2FA token generated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "2FA token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Internal server error occurred while processing the refresh token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/team": {
      "get": {
        "operationId": "getTeam",
        "tags": ["Team"],
        "summary": "Get the team data.",
        "description": "Get the team data for the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "description": "Unique identifier for the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access - no or invalid access token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingWentWrongError"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateTeam",
        "tags": ["Team"],
        "summary": "Updates the team data.",
        "description": "Updates the team data for the authenticated user if user is an admin.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data required to update the team.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access - no or invalid access token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingWentWrongError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "tranferOnwership",
        "tags": ["Team"],
        "summary": "Transfer a team's ownership.",
        "description": "Transfer a team's ownership if user is the previous owner.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data required to transfer a team's ownership.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["new_onwer_id", "team_id"],
                "properties": {
                  "team_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the team."
                  },
                  "new_owner_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The ID of the new owner."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Team ownership transferred successfully."
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access - no or invalid access token provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SomethingWentWrongError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteTeam",
        "tags": ["Team"],
        "summary": "Deletes the authenticated user's team.",
        "description": "Deletes the team if the authenticated user is the team's owner.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "description": "Unique identifier for the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the team.",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Bad request - missing or invalid team id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/membership": {
      "get": {
        "operationId": "getMembership",
        "tags": ["Team"],
        "summary": "Fetches the authenticated user's team membership.",
        "description": "Fetches the authenticated user's team membership.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "team_id",
            "in": "query",
            "description": "Unique identifier for the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user team membership.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["id", "email"],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the membership."
                    },
                    "team_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the team."
                    },
                    "role": {
                      "type": "string",
                      "description": "The user's role in the team."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing or invalid team id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/memberships": {
      "get": {
        "operationId": "getMemberships",
        "tags": ["Team"],
        "summary": "Fetches all memberships assigned to a team slug",
        "description": "Fetches all memberships assigned to a team slug",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "description": "Unique slug identifier for the team.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved team memberships.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["id", "name", "slug"],
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "Unique identifier for the team."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name for the team."
                    },
                    "image": {
                      "type": "string",
                      "description": "Logo for the team."
                    },
                    "slug": {
                      "type": "string",
                      "description": "Unique slug identifier for the team."
                    },
                    "brand_color": {
                      "type": "string",
                      "description": "Brand color for the team."
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Membership"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid team slug provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Team not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict or other server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "required": ["id", "email"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user."
          },
          "name": {
            "type": "string",
            "description": "The user's name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The user's email address."
          },
          "image": {
            "type": "string",
            "description": "The user's avatar."
          },
          "email_verified_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time that the user verified their email."
          },
          "is_two_factor_enabled": {
            "type": "boolean",
            "description": "Indicates whether the user has enabled two-factor authentication."
          },
          "is_team_created": {
            "type": "boolean",
            "description": "Indicates whether the user has already created a team."
          },
          "subscription": {
            "type": "string",
            "description": "The subscription tier of the user: free, pro, etc."
          },
          "flag_type": {
            "type": "string",
            "description": "The flag the user is on: default, beta, etc."
          },
          "access_token": {
            "type": "string",
            "description": "JWT access token for the session."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the user authenticated."
          }
        }
      },
      "Team": {
        "type": "object",
        "required": [
          "id",
          "name",
          "email",
          "slug",
          "business_activity",
          "business_type",
          "user_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the team."
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the user."
          },
          "name": {
            "type": "string",
            "description": "The team's name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The team's email address."
          },
          "image": {
            "type": "string",
            "description": "The team's avatar."
          },
          "brand_color": {
            "type": "string",
            "description": "The team's brand color."
          },
          "registered_number": {
            "type": "string",
            "description": "The team's registered number."
          },
          "phone_number": {
            "type": "string",
            "description": "The team's phone number."
          },
          "default_currency": {
            "type": "string",
            "description": "The team's default currency."
          },
          "address_street": {
            "type": "string",
            "description": "The team's address street."
          },
          "address_number": {
            "type": "string",
            "description": "The team's address number."
          },
          "address_city": {
            "type": "string",
            "description": "The team's address city."
          },
          "address_state": {
            "type": "string",
            "description": "The team's address state."
          },
          "address_country": {
            "type": "string",
            "description": "The team's address country."
          },
          "address_zipcode": {
            "type": "string",
            "description": "The team's address zipcode."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the team was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the team was updated last time."
          }
        }
      },
      "Membership": {
        "type": "object",
        "required": ["id", "name", "email", "created_at", "role"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the member."
          },
          "name": {
            "type": "string",
            "description": "The members's name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The member's email address."
          },
          "image": {
            "type": "string",
            "description": "The members's avatar."
          },
          "role": {
            "type": "string",
            "description": "The role of the member in the team."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time the members was created."
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "password": {
            "type": "string",
            "description": "User's password, minimum 6 characters."
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user's full name."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "A new email address to update the current one."
          },
          "password_hash": {
            "type": "string",
            "description": "Current password hash for verification purposes."
          },
          "new_password": {
            "type": "string",
            "description": "New password for the user."
          },
          "email_verified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user's email was verified."
          },
          "is_two_factor_enabled": {
            "type": "boolean",
            "description": "Indicates if two-factor authentication is enabled."
          },
          "is_team_created": {
            "type": "boolean",
            "description": "Indicates if the user has created a team."
          },
          "image": {
            "type": "string",
            "description": "URL of the user's avatar image."
          }
        }
      },
      "TeamRequest": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "team_id": {
            "type": "string",
            "description": "The ID of the team."
          },
          "name": {
            "type": "string",
            "description": "The name of the team."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The team's email address."
          },
          "brand_color": {
            "type": "string",
            "description": "The team's brand color."
          },
          "image": {
            "type": "string",
            "description": "URL of the team's avatar image."
          },
          "registered_number": {
            "type": "string",
            "description": "The team's registered number."
          },
          "phone_number": {
            "type": "string",
            "description": "The team's phone number."
          },
          "default_currency": {
            "type": "string",
            "description": "The team's default currency."
          },
          "address_street": {
            "type": "string",
            "description": "The team's address street."
          },
          "address_number": {
            "type": "string",
            "description": "The team's address number."
          },
          "address_city": {
            "type": "string",
            "description": "The team's address city."
          },
          "address_state": {
            "type": "string",
            "description": "The team's address state."
          },
          "address_country": {
            "type": "string",
            "description": "The team's address country."
          },
          "address_zipcode": {
            "type": "string",
            "description": "The team's address zipcode."
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message describing what went wrong."
          }
        }
      },
      "AccountNotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message indicating the account was not found."
          }
        }
      },
      "SomethingWentWrongError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "A general error that occurs when an operation fails on the server."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "COMPASSO_TOKEN"
      }
    }
  }
}
